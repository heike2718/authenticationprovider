---
openapi: 3.1.0
tags:
- name: AboutResource
components:
  schemas:
    AboutDto:
      type: object
      properties:
        name:
          type: string
        env:
          type: string
        stage:
          type: string
        version:
          type: string
    AuthorizationCredentials:
      type: object
      required:
      - loginName
      - passwort
      properties:
        loginName:
          type: string
          maxLength: 255
        passwort:
          type: string
        kleber:
          type: string
    ChangeProfileDataPayload:
      type: object
      required:
      - clientCredentials
      - profileData
      - uuid
      properties:
        clientCredentials:
          $ref: "#/components/schemas/OAuthClientCredentials"
        profileData:
          $ref: "#/components/schemas/ProfileDataPayload"
        uuid:
          type: string
    ChangeProfilePasswordPayload:
      type: object
      required:
      - clientCredentials
      - passwordPayload
      - uuid
      properties:
        clientCredentials:
          $ref: "#/components/schemas/OAuthClientCredentials"
        passwordPayload:
          $ref: "#/components/schemas/ProfilePasswordPayload"
        uuid:
          type: string
    ChangeTempPasswordPayload:
      type: object
      required:
      - tokenId
      - email
      - tempPassword
      - zweiPassworte
      properties:
        tokenId:
          type: string
          minLength: 1
          maxLength: 40
        email:
          type: string
          minLength: 1
          maxLength: 255
        tempPassword:
          type: string
          minLength: 1
          maxLength: 40
        kleber:
          type: string
        zweiPassworte:
          $ref: "#/components/schemas/ZweiPassworte"
    ClientCredentials:
      type: object
      required:
      - accessToken
      - redirectUrl
      properties:
        accessToken:
          type: string
          pattern: \S
          maxLength: 50
        redirectUrl:
          type: string
          pattern: ""
        state:
          type: string
          maxLength: 150
    ClientInformation:
      type: object
      properties:
        name:
          type: string
        zurueckText:
          type: string
        agbUrl:
          type: string
        loginnameSupported:
          type: boolean
        namenRequired:
          type: boolean
        baseUrl:
          type: string
        state:
          type: string
    LogEntry:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        message:
          type: string
        level:
          $ref: "#/components/schemas/TSLogLevel"
    LoginCredentials:
      type: object
      required:
      - authorizationCredentials
      - clientCredentials
      properties:
        authorizationCredentials:
          $ref: "#/components/schemas/AuthorizationCredentials"
        clientCredentials:
          $ref: "#/components/schemas/ClientCredentials"
    MessagePayload:
      type: object
      properties:
        level:
          type: string
        message:
          type: string
    OAuthAccessTokenPayload:
      type: object
      properties:
        accessToken:
          type: string
        expiresAt:
          type: integer
          format: int64
        nonce:
          type: string
    OAuthClientCredentials:
      type: object
      required:
      - clientId
      - clientSecret
      properties:
        clientId:
          type: string
          pattern: \S
          maxLength: 50
        clientSecret:
          type: string
          pattern: \S
          maxLength: 50
        nonce:
          type: string
          maxLength: 36
    OAuthFlowType:
      type: string
      enum:
      - IMPLICITE_FLOW
      - AUTHORIZATION_TOKEN_GRANT
    OrderTempPasswordPayload:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 255
        kleber:
          type: string
    ProfileDataPayload:
      type: object
      required:
      - email
      - loginName
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 255
        loginName:
          type: string
          maxLength: 255
        vorname:
          type: string
          minLength: 1
          maxLength: 100
        nachname:
          type: string
          minLength: 1
          maxLength: 100
    ProfilePasswordPayload:
      type: object
      required:
      - passwort
      - zweiPassworte
      properties:
        passwort:
          type: string
        zweiPassworte:
          $ref: "#/components/schemas/ZweiPassworte"
    ResponsePayload:
      deprecated: true
      type: object
      properties:
        message:
          $ref: "#/components/schemas/MessagePayload"
        data: {}
    SelectProfilePayload:
      type: object
      required:
      - clientCredentials
      - uuid
      properties:
        clientCredentials:
          $ref: "#/components/schemas/OAuthClientCredentials"
        uuid:
          type: string
    SignUpCredentials:
      type: object
      required:
      - email
      - zweiPassworte
      - clientCredentials
      properties:
        email:
          type: string
          maxLength: 255
        loginName:
          type: string
          maxLength: 255
        vorname:
          type: string
          maxLength: 100
        nachname:
          type: string
          maxLength: 100
        nonce:
          type: string
          maxLength: 60
        zweiPassworte:
          $ref: "#/components/schemas/ZweiPassworte"
        agbGelesen:
          type: boolean
        clientCredentials:
          $ref: "#/components/schemas/ClientCredentials"
        kleber:
          type: string
    SignUpLogInResponseData:
      type: object
      properties:
        state:
          type: string
        idToken:
          type: string
        nonce:
          type: string
        oauthFlowType:
          $ref: "#/components/schemas/OAuthFlowType"
        tokenExchangeType:
          $ref: "#/components/schemas/OAuthFlowType"
    TSLogLevel:
      type: string
      enum:
      - All
      - Debug
      - Info
      - Warn
      - Error
      - Fatal
      - "Off"
    TempPasswordV2ResponseDto:
      type: object
      properties:
        message:
          type: string
    ZweiPassworte:
      type: object
      required:
      - passwort
      - passwortWdh
      properties:
        passwort:
          type: string
        passwortWdh:
          type: string
  securitySchemes:
    SecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication
paths:
  /api/about:
    get:
      summary: Über authprovider. Zum Smoketest sinnvoll.
      operationId: getAboutInfo
      tags:
      - AboutResource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AboutDto"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
  /api/auth/sessions/auth-token-grant:
    post:
      summary: "Authentifiziert den Benutzer\t"
      operationId: authenticateUserWithTokenExchangeTypeAuthTokenGrant
      parameters:
      - description: "Authentifiziert den Benutzer mit Loginname / Email und Passwort.\
          \ Gibt als SignUpLogInResponseData.idToken ein oneTimeToken zurück, mit\
          \ dem der Server des anfragenden Clients das JWT abholen kann."
        in: query
        name: accessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpLogInResponseData"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Client credentials stimmen nicht
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Authentication Resource
  /api/clients/client/accesstoken:
    post:
      summary: Authentifiziert den Client
      operationId: authenticateClient
      parameters:
      - description: Ein zuvor über POST authprovider/api/clients/client/accesstoken
          angefordertes OTT.
        in: query
        name: accessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthClientCredentials"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthAccessTokenPayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Client credentials stimmen nicht
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Client Resource
  /api/clients/v2:
    get:
      summary: 'Läd die Infos über den Client für die Loginmaske. '
      operationId: getClientInformation
      parameters:
      - description: Ein zuvor über POST authprovider/api/clients/client/accesstoken
          angefordertes OTT.
        in: query
        name: accessToken
        required: true
        schema:
          type: string
          pattern: \S
          maxLength: 50
      - description: Die Redirect-URL für den anfragenden Client. Ist das Secret in
          der Kommunikation.
        in: query
        name: redirectUrl
        required: true
        schema:
          type: string
          pattern: ""
      - description: "hat seine Bedeutung irgendwie verloren, hängt aber in allen\
          \ Client-Anwendungen drin."
        in: query
        name: state
        schema:
          type: string
          maxLength: 150
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInformation"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "908":
          description: Das accessToken hat eine Zeitbegrenzung und die ist abgelaufen.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Client Resource
  /api/guiversion:
    get:
      summary: "Gibt die erwartete GUI-Version zurück. Stammt noch aus der Zeit, als\
        \ der Brwoser die Angular-Anwendung ungebührlich gecached hat."
      operationId: getExcpectedGuiVersion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Gui Version Resource
  /api/heartbeats:
    get:
      summary: "ping, ob autprovider da ist."
      operationId: check liveliness
      parameters:
      - description: ein secret
        in: header
        name: X-HEARTBEAT-ID
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Heartbeat Resource
  /api/log:
    post:
      summary: Schreibt etwas ins server.log.
      operationId: logError
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogEntry"
        required: true
      responses:
        "200":
          description: OK
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: Bad Request
      tags:
      - Log Resource
  /api/profiles/profile:
    post:
      summary: gibt die Daten des Benutzers zurück
      operationId: getUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectProfilePayload"
        required: true
      responses:
        "200":
          description: data des ResponsePayload ist ein User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Benutzer konnte nicht authentifiziert werden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Benutzerprofil Resource
    delete:
      summary: löscht das Benutzerkonto
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectProfilePayload"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Benutzer konnte nicht authentifiziert werden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Benutzerprofil Resource
  /api/profiles/profile/data:
    put:
      summary: ändert Daten des Benutzers
      operationId: changeData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeProfileDataPayload"
        required: true
      responses:
        "200":
          description: data des ResponsePayload ist ein User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Benutzer konnte nicht authentifiziert werden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Benutzerprofil Resource
  /api/profiles/profile/password:
    put:
      summary: ändert das Passwort.
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeProfilePasswordPayload"
        required: true
      responses:
        "200":
          description: data des ResponsePayload ist ein NoncePayload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Benutzer konnte nicht authentifiziert werden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Benutzerprofil Resource
  /api/registration/confirmation:
    get:
      summary: aktiviert das Konto des Benutzers.
      operationId: activateUser
      parameters:
      - description: "Ein beim Anlegen des Kontos generierter String, der miz der\
          \ UUID persistiert ist und als Query-Parameter im Link mit der Mail versendet\
          \ wird."
        in: query
        name: code
        schema:
          type: string
      responses:
        "200":
          description: OK
      tags:
      - User Activation Resource
  /api/temppwd:
    post:
      summary: "Erzeugt ein temporäres Passwort, mit dem man sein Passwort zurücksetzen\
        \ kann."
      operationId: orderTempPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderTempPasswordPayload"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TempPasswordV2ResponseDto"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Temp Password Resource
    put:
      summary: Ändert das eigene Passwort.
      operationId: changeTempPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeTempPasswordPayload"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "401":
          description: Das temporäre Passwort stimmt nicht
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - Temp Password Resource
  /api/token/exchange/{oneTimeToken}:
    put:
      summary: Gibt das JWT gegen ein einmaltoken zurück.
      operationId: exchangeOneTimeTokenWithJwt
      parameters:
      - description: secure String
        in: path
        name: oneTimeToken
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthClientCredentials"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
        "400":
          description: fehlgeschlagene Input-Validierung
        "401":
          content:
            application/json: {}
        "404":
          content:
            application/json: {}
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
      tags:
      - Token Exchange Resource
  /api/users/signup:
    post:
      summary: Legt ein neues Benutzerkonto an
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpCredentials"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpLogInResponseData"
        "400":
          description: fehlgeschlagene Input-Validierung
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePayload"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponsePayload"
      tags:
      - User Resource
info:
  title: authprovider
  version: 3.0.0
  description: API für mathe-jung-alt-iam
  contact:
    name: Heike Winkelvoß
    email: info@egladil.de
    url: https://mathe-jung-alt.de
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: http://localhost:10000
  description: Auto generated value
- url: http://0.0.0.0:10000
  description: Auto generated value
